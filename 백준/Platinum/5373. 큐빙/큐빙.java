import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		StringBuilder sb  = new StringBuilder();
		for(int tc = 1; tc<=T;tc++) {
			char[][] U = {{'w','w','w'},{'w','w','w'},{'w','w','w'}};
			char[][] D = {{'y','y','y'},{'y','y','y'},{'y','y','y'}};
			char[][] F = {{'r','r','r'},{'r','r','r'},{'r','r','r'}};
			char[][] B = {{'o','o','o'},{'o','o','o'},{'o','o','o'}};
			char[][] L = {{'g','g','g'},{'g','g','g'},{'g','g','g'}};
			char[][] R = {{'b','b','b'},{'b','b','b'},{'b','b','b'}};
			int N = Integer.parseInt(br.readLine());
			StringTokenizer st = new StringTokenizer(br.readLine());
			for(int n=0; n<N; n++) { //나오는 단어 길이 
				char[] C = st.nextToken().toCharArray();
				switch(C[0]) {
				case 'U':
					//char[] TMP = {B[2][0],B[2][1],B[2][2]};
					if(C[1]=='+') { // 시계방향  
						char a = U[0][0], b = U[1][0];
						U[0][0]=U[2][0];
						U[1][0]=U[2][1];
						U[2][0]=U[2][2];
						U[2][1]=U[1][2];
						U[2][2]=U[0][2];
						U[1][2]=U[0][1];
						U[0][2]=a;
						U[0][1]=b;
						char[] TMP = {B[2][0],B[2][1],B[2][2]};
						B[2][0]=L[2][0];B[2][1]=L[2][1];B[2][2]=L[2][2];
						L[2][0]=F[0][2];L[2][1]=F[0][1];L[2][2]=F[0][0];
						F[0][2]=R[0][2];F[0][1]=R[0][1];F[0][0]=R[0][0];
						R[0][2]=TMP[0];R[0][1]=TMP[1];R[0][0]=TMP[2];
						break;
					}else {
						char a = U[0][0], b= U[0][1];
						U[0][0] = U[0][2];
						U[0][1]=U[1][2];
						U[0][2]=U[2][2];
						U[1][2]=U[2][1];
						U[2][2]=U[2][0];
						U[2][1]=U[1][0];
						U[2][0]=a;
						U[1][0]=b;
						char[] TMP = {B[2][0],B[2][1],B[2][2]};
						B[2][0]=R[0][2];B[2][1]=R[0][1];B[2][2]=R[0][0];
						R[0][2]=F[0][2];R[0][1]=F[0][1];R[0][0]=F[0][0];
						F[0][2]=L[2][0];F[0][1]=L[2][1];F[0][0]=L[2][2];
						L[2][0]=TMP[0];L[2][1]=TMP[1];L[2][2]=TMP[2];
						break;
					}
				case 'F':
					if(C[1]=='+') {
						char a = F[0][0], b = F[1][0];
						F[0][0]=F[2][0];
						F[1][0]=F[2][1];
						F[2][0]=F[2][2];
						F[2][1]=F[1][2];
						F[2][2]=F[0][2];
						F[1][2]=F[0][1];
						F[0][2]=a;
						F[0][1]=b;
						char[]TMP = {U[2][0],U[2][1],U[2][2]};
						U[2][0]=L[0][0];U[2][1]=L[1][0];U[2][2]=L[2][0];
						L[0][0]=D[0][2];L[1][0]=D[0][1];L[2][0]=D[0][0];
						D[0][2]=R[0][0];D[0][1]=R[1][0];D[0][0]=R[2][0];
						R[0][0]=TMP[0];R[1][0]=TMP[1];R[2][0]=TMP[2];
						break;
					}else {
						char a = F[0][0], b= F[0][1];
						F[0][0] = F[0][2];
						F[0][1]=F[1][2];
						F[0][2]=F[2][2];
						F[1][2]=F[2][1];
						F[2][2]=F[2][0];
						F[2][1]=F[1][0];
						F[2][0]=a;
						F[1][0]=b;
						char[]TMP = {U[2][0],U[2][1],U[2][2]};
						U[2][0]=R[0][0];U[2][1]=R[1][0];U[2][2]=R[2][0];
						R[0][0]=D[0][2];R[1][0]=D[0][1];R[2][0]=D[0][0];
						D[0][2]=L[0][0];D[0][1]=L[1][0];D[0][0]=L[2][0];
						L[0][0]=TMP[0];L[1][0]=TMP[1];L[2][0]=TMP[2];
						break;
					}
				case 'D':
					if(C[1]=='+') {
						char a = D[0][0], b = D[1][0];
						D[0][0]=D[2][0];
						D[1][0]=D[2][1];
						D[2][0]=D[2][2];
						D[2][1]=D[1][2];
						D[2][2]=D[0][2];
						D[1][2]=D[0][1];
						D[0][2]=a;
						D[0][1]=b;
						char[] TMP = {F[2][0],F[2][1],F[2][2]};
						F[2][0]=L[0][2];F[2][1]=L[0][1];F[2][2]=L[0][0];
						L[0][2]=B[0][2];L[0][1]=B[0][1];L[0][0]=B[0][0];
						B[0][2]=R[2][0];B[0][1]=R[2][1];B[0][0]=R[2][2];
						R[2][0]=TMP[0];R[2][1]=TMP[1];R[2][2]=TMP[2];
						break;
					}else {
						char a = D[0][0], b= D[0][1];
						D[0][0] = D[0][2];
						D[0][1]=D[1][2];
						D[0][2]=D[2][2];
						D[1][2]=D[2][1];
						D[2][2]=D[2][0];
						D[2][1]=D[1][0];
						D[2][0]=a;
						D[1][0]=b;
						char[] TMP = {F[2][0],F[2][1],F[2][2]};
						F[2][0]=R[2][0];F[2][1]=R[2][1];F[2][2]=R[2][2];
						R[2][0]=B[0][2];R[2][1]=B[0][1];R[2][2]=B[0][0];
						B[0][2]=L[0][2];B[0][1]=L[0][1];B[0][0]=L[0][0];
						L[0][2]=TMP[0];L[0][1]=TMP[1];L[0][0]=TMP[2];
						
						break;
					}
				case 'B':
					if(C[1]=='+') {
						char a = B[0][0], b = B[1][0];
						B[0][0]=B[2][0];
						B[1][0]=B[2][1];
						B[2][0]=B[2][2];
						B[2][1]=B[1][2];
						B[2][2]=B[0][2];
						B[1][2]=B[0][1];
						B[0][2]=a;
						B[0][1]=b;
						char[] TMP = {D[2][0],D[2][1],D[2][2]};
						D[2][0]=L[2][2];D[2][1]=L[1][2];D[2][2]=L[0][2];
						L[2][2]=U[0][2];L[1][2]=U[0][1];L[0][2]=U[0][0];
						U[0][2]=R[2][2];U[0][1]=R[1][2];U[0][0]=R[0][2];
						R[2][2]=TMP[0];R[1][2]=TMP[1];R[0][2]=TMP[2];
						break;
					}else {
						char a = B[0][0], b= B[0][1];
						B[0][0] = B[0][2];
						B[0][1]=B[1][2];
						B[0][2]=B[2][2];
						B[1][2]=B[2][1];
						B[2][2]=B[2][0];
						B[2][1]=B[1][0];
						B[2][0]=a;
						B[1][0]=b;
						char[] TMP = {D[2][0],D[2][1],D[2][2]};
						D[2][0]=R[2][2];D[2][1]=R[1][2];D[2][2]=R[0][2];
						R[2][2]=U[0][2];R[1][2]=U[0][1];R[0][2]=U[0][0];
						U[0][2]=L[2][2];U[0][1]=L[1][2];U[0][0]=L[0][2];
						L[2][2]=TMP[0];L[1][2]=TMP[1];L[0][2]=TMP[2];
						break;
					}
				case 'L':
					if(C[1]=='+') {
						char a = L[0][0], b = L[1][0];
						L[0][0]=L[2][0];
						L[1][0]=L[2][1];
						L[2][0]=L[2][2];
						L[2][1]=L[1][2];
						L[2][2]=L[0][2];
						L[1][2]=L[0][1];
						L[0][2]=a;
						L[0][1]=b;
						char[] TMP = {D[0][0],D[1][0],D[2][0]};
						D[0][0]=F[0][0];D[1][0]=F[1][0];D[2][0]=F[2][0];
						F[0][0]=U[0][0];F[1][0]=U[1][0];F[2][0]=U[2][0];
						U[0][0]=B[0][0];U[1][0]=B[1][0];U[2][0]=B[2][0];
						B[0][0]=TMP[0];B[1][0]=TMP[1];B[2][0]=TMP[2];
						break;
					}else {
						char a = L[0][0], b= L[0][1];
						L[0][0] = L[0][2];
						L[0][1]=L[1][2];
						L[0][2]=L[2][2];
						L[1][2]=L[2][1];
						L[2][2]=L[2][0];
						L[2][1]=L[1][0];
						L[2][0]=a;
						L[1][0]=b;
						char[] TMP ={D[0][0],D[1][0],D[2][0]};
						D[0][0]=B[0][0];D[1][0]=B[1][0];D[2][0]=B[2][0];
						B[0][0]=U[0][0];B[1][0]=U[1][0];B[2][0]=U[2][0];
						U[0][0]=F[0][0];U[1][0]=F[1][0];U[2][0]=F[2][0];
						F[0][0]=TMP[0];F[1][0]=TMP[1];F[2][0]=TMP[2];
						break;
					}
				case 'R':
					if(C[1]=='+') {
						char a = R[0][0], b = R[1][0];
						R[0][0]=R[2][0];
						R[1][0]=R[2][1];
						R[2][0]=R[2][2];
						R[2][1]=R[1][2];
						R[2][2]=R[0][2];
						R[1][2]=R[0][1];
						R[0][2]=a;
						R[0][1]=b;
						char[] TMP = {U[2][2],U[1][2],U[0][2]};
						U[2][2]=F[2][2];U[1][2]=F[1][2];U[0][2]=F[0][2];
						F[2][2]=D[2][2];F[1][2]=D[1][2];F[0][2]=D[0][2];
						D[2][2]=B[2][2];D[1][2]=B[1][2];D[0][2]=B[0][2];
						B[2][2]=TMP[0];B[1][2]=TMP[1];B[0][2]=TMP[2];
						break;
					}else {
						char a = R[0][0], b= R[0][1];
						R[0][0] = R[0][2];
						R[0][1]=R[1][2];
						R[0][2]=R[2][2];
						R[1][2]=R[2][1];
						R[2][2]=R[2][0];
						R[2][1]=R[1][0];
						R[2][0]=a;
						R[1][0]=b;
						char[] TMP ={U[2][2],U[1][2],U[0][2]};
						U[2][2]=B[2][2];U[1][2]=B[1][2];U[0][2]=B[0][2];
						B[2][2]=D[2][2];B[1][2]=D[1][2];B[0][2]=D[0][2];
						D[2][2]=F[2][2];D[1][2]=F[1][2];D[0][2]=F[0][2];
						F[2][2]=TMP[0];F[1][2]=TMP[1];F[0][2]=TMP[2];
						break;
					}
				}
				
			}
			sb.append(U[0][0]).append(U[0][1]).append(U[0][2]).append('\n');
			sb.append(U[1][0]).append(U[1][1]).append(U[1][2]).append('\n');
			sb.append(U[2][0]).append(U[2][1]).append(U[2][2]).append('\n');
		}
		System.out.println(sb);
	}
}